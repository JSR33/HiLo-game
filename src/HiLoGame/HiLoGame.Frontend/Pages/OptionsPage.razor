@page "/options"
@using HiLoGame.Contracts.v1.Requests
@using HiLoGame.Frontend.Services
@inject IGameInfoService GameInfoService 
@inject SessionStorageAccessor SessionStorageAccessor

<MudStack Class="pa-8">
    <MudSelect T="string" Label="Game mode" AnchorOrigin="Origin.BottomCenter" @bind-Value="GameModeValue">
        <Virtualize Items="@gameModes" Context="gameMode">
            <MudSelectItem T="string" Value="@gameMode">@gameMode</MudSelectItem>
        </Virtualize>
    </MudSelect>
    <MudNumericField @bind-Value="NumberOdRounds" Label="Number of rounds" Variant="Variant.Text" Min="1" Max="6" />
</MudStack>
<MudStack Row="true" Class="justify-center">
    <MudFab Href="/" Color="Color.Dark" Icon="@Icons.Filled.ArrowBackIos" Label="Back" Size="Size.Small"></MudFab>
    <MudFab Href="/" Color="Color.Dark" Icon="@Icons.Filled.Save" Label="Save" Size="Size.Small" OnClick="UpdateGameInfo"></MudFab>
</MudStack>

@code {
    private int NumberOdRounds { get; set; } 
    private string GameModeValue { get; set; } 
    private string GameTypeValue { get; set; } 
    private string[] gameModes = Array.Empty<string>();
    private string[] gameTypes = Array.Empty<string>();

    protected override async Task OnInitializedAsync(){
        gameModes = (await GameInfoService.GetGameModes()).ToArray();
        gameTypes = (await GameInfoService.GetGameTypes()).ToArray();

        var gameInfo = await GameInfoService.GetGameInfo();
        if(gameInfo.GameMode is null
            || gameInfo.GameType is null){
            GameModeValue = gameModes.First();
            GameTypeValue = gameTypes.First();
            NumberOdRounds = 1;

            return;
        }

        GameModeValue = gameInfo.GameMode;
        GameTypeValue = gameInfo.GameType;
        NumberOdRounds = gameInfo.NumberOfRounds;
    }

    private async void UpdateGameInfo(){
        var gameInfo = new GameInfoRequest()
            {
                GameMode = GameModeValue,
                GameType = GameTypeValue,
                NumberOfRounds = NumberOdRounds
            };

        var updated = await GameInfoService.UpdateGameInfo(gameInfo);
        await SessionStorageAccessor.SetValueAsync("GameMode", updated.GameMode);
        await SessionStorageAccessor.SetValueAsync("GameType", updated.GameType);
        await SessionStorageAccessor.SetValueAsync("NumberOfRounds", updated.NumberOfRounds);
    }
}
